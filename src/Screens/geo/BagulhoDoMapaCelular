import React, { useState, useEffect } from 'react';
import { 
  View, 
  TextInput, 
  StyleSheet, 
  Keyboard, 
  Alert, 
  TouchableOpacity,
  Text,
  Pressable,
  ActivityIndicator,
  Dimensions,
  ScrollView
} from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import * as Location from 'expo-location';
import Ionicons from 'react-native-vector-icons/Ionicons';
import Icon from 'react-native-vector-icons/MaterialIcons';

const mockAcademias = [
  {
    id: 1,
    nome: "Smart Fit Guaianazes",
    endereco: "Av. José Pinheiro Borges, 100 - Centro",
    telefone: "(11) 2554-7890",
    horario: "06:00-22:00",
    latitude: -23.5390,
    longitude: -46.4100,
    bairro: "Guaianazes",
    preco: 99.90,
    avaliacao: 4.5
  },
  {
    id: 2,
    nome: "Gym Center Guaianazes",
    endereco: "R. João Batista, 255 - Vila São João",
    telefone: "(11) 2558-4567",
    horario: "05:30-23:00",
    latitude: -23.5415,
    longitude: -46.4082,
    bairro: "Guaianazes",
    preco: 89.90,
    avaliacao: 4.2
  },
  {
    id: 3,
    nome: "Power House Academia",
    endereco: "Av. Dr. João Ribeiro, 789 - Centro",
    telefone: "(11) 2562-3412",
    horario: "06:00-22:00",
    latitude: -23.5382,
    longitude: -46.4125,
    bairro: "Guaianazes",
    preco: 120.00,
    avaliacao: 4.7
  },
  {
    id: 4,
    nome: "Academia Forma Total",
    endereco: "R. Sargento Ary Gomes, 450 - Vila Minerva",
    telefone: "(11) 2556-1289",
    horario: "07:00-21:00",
    latitude: -23.5401,
    longitude: -46.4068,
    bairro: "Guaianazes",
    preco: 75.00,
    avaliacao: 3.9
  },
  {
    id: 5,
    nome: "Body Health Gym",
    endereco: "Praça Dom José Gaspar, 33 - Lajeado",
    telefone: "(11) 2560-9987",
    horario: "06:00-23:00",
    latitude: -23.5375,
    longitude: -46.4093,
    bairro: "Guaianazes",
    preco: 110.00,
    avaliacao: 4.3
  },
  {
    id: 6,
    nome: "Iron Muscles Academia",
    endereco: "R. Comendador Souza Fontes, 678 - Cidade A.E. Carvalho",
    telefone: "(11) 2557-3344",
    horario: "05:00-00:00",
    latitude: -23.5420,
    longitude: -46.4115,
    bairro: "Guaianazes",
    preco: 95.00,
    avaliacao: 4.8
  },
  {
    id: 7,
    nome: "Academia Energia Pura",
    endereco: "R. Dr. João Batista, 1123 - Jardim São Paulo",
    telefone: "(11) 2561-5566",
    horario: "06:00-22:00",
    latitude: -23.5398,
    longitude: -46.4070,
    bairro: "Guaianazes",
    preco: 85.00,
    avaliacao: 4.1
  },
  {
    id: 8,
    nome: "Fit Center Guaianazes",
    endereco: "R. Padre Estanislau, 300 - Vila Moraes",
    telefone: "(11) 2559-8877",
    horario: "05:00-22:00",
    latitude: -23.5365,
    longitude: -46.4132,
    bairro: "Guaianazes",
    preco: 80.00,
    avaliacao: 4.0
  },
  {
    id: 9,
    nome: "Muscle Power Gym",
    endereco: "Av. Nordestina, 1500 - Lajeado",
    telefone: "(11) 2563-1122",
    horario: "06:00-23:00",
    latitude: -23.5350,
    longitude: -46.4150,
    bairro: "Guaianazes",
    preco: 105.00,
    avaliacao: 4.4
  },
  {
    id: 10,
    nome: "Academia Corpo Livre",
    endereco: "R. Serra da Mantiqueira, 45 - Jardim Lourdes",
    telefone: "(11) 2555-6789",
    horario: "07:00-21:00",
    latitude: -23.5432,
    longitude: -46.4058,
    bairro: "Guaianazes",
    preco: 70.00,
    avaliacao: 3.8
  },
  // Continuação com mais academias em Guaianazes...
  {
    id: 11,
    nome: "Academia Guaianazes Fitness",
    endereco: "R. Cap. Pacheco e Chaves, 200 - Vila Princesa Isabel",
    telefone: "(11) 2564-9988",
    horario: "06:00-22:00",
    latitude: -23.5440,
    longitude: -46.4140,
    bairro: "Guaianazes",
    preco: 90.00,
    avaliacao: 4.2
  },
  {
    id: 12,
    nome: "New Body Academia",
    endereco: "R. Dr. João Ribeiro, 500 - Centro",
    telefone: "(11) 2565-3344",
    horario: "05:30-22:30",
    latitude: -23.5385,
    longitude: -46.4110,
    bairro: "Guaianazes",
    preco: 100.00,
    avaliacao: 4.3
  },
  {
    id: 13,
    nome: "Academia Força e Saúde",
    endereco: "Av. José Pinheiro Borges, 300 - Centro",
    telefone: "(11) 2554-1122",
    horario: "06:00-22:00",
    latitude: -23.5395,
    longitude: -46.4095,
    bairro: "Guaianazes",
    preco: 85.00,
    avaliacao: 4.0
  },
  {
    id: 14,
    nome: "Guaianazes Gym",
    endereco: "R. Sgt. Ary Gomes, 600 - Vila Minerva",
    telefone: "(11) 2556-5544",
    horario: "07:00-21:00",
    latitude: -23.5405,
    longitude: -46.4060,
    bairro: "Guaianazes",
    preco: 75.00,
    avaliacao: 3.9
  },
  {
    id: 15,
    nome: "Academia Top Forma",
    endereco: "R. João Batista, 400 - Vila São João",
    telefone: "(11) 2558-7788",
    horario: "06:00-22:00",
    latitude: -23.5418,
    longitude: -46.4075,
    bairro: "Guaianazes",
    preco: 95.00,
    avaliacao: 4.1
  },

  // Ferraz de Vasconcelos (20 academias)
  {
    id: 31,
    nome: "Academia Ferraz Fitness",
    endereco: "Av. Brasil, 1000 - Centro",
    telefone: "(11) 4678-1234",
    horario: "06:00-22:00",
    latitude: -23.5412,
    longitude: -46.3689,
    bairro: "Ferraz de Vasconcelos",
    preco: 90.00,
    avaliacao: 4.2
  },
  {
    id: 32,
    nome: "Body Tech Ferraz",
    endereco: "R. São Paulo, 250 - Jardim Pérola",
    telefone: "(11) 4678-5678",
    horario: "05:30-23:00",
    latitude: -23.5435,
    longitude: -46.3702,
    bairro: "Ferraz de Vasconcelos",
    preco: 110.00,
    avaliacao: 4.5
  },
  {
    id: 33,
    nome: "Ferraz Gym Center",
    endereco: "Av. São José, 789 - Vila Romanópolis",
    telefone: "(11) 4679-9012",
    horario: "06:00-22:00",
    latitude: -23.5398,
    longitude: -46.3725,
    bairro: "Ferraz de Vasconcelos",
    preco: 85.00,
    avaliacao: 4.0
  },
  {
    id: 34,
    nome: "Academia Power Ferraz",
    endereco: "R. Rio de Janeiro, 450 - Jardim Brasil",
    telefone: "(11) 4679-3456",
    horario: "07:00-21:00",
    latitude: -23.5405,
    longitude: -46.3668,
    bairro: "Ferraz de Vasconcelos",
    preco: 75.00,
    avaliacao: 3.8
  },
  {
    id: 35,
    nome: "Muscle House Ferraz",
    endereco: "Praça da Bíblia, 33 - Centro",
    telefone: "(11) 4678-7890",
    horario: "06:00-23:00",
    latitude: -23.5425,
    longitude: -46.3693,
    bairro: "Ferraz de Vasconcelos",
    preco: 100.00,
    avaliacao: 4.3
  },
  {
    id: 36,
    nome: "Ferraz Iron Gym",
    endereco: "R. Minas Gerais, 678 - Jardim Promissão",
    telefone: "(11) 4677-1122",
    horario: "05:00-00:00",
    latitude: -23.5440,
    longitude: -46.3715,
    bairro: "Ferraz de Vasconcelos",
    preco: 95.00,
    avaliacao: 4.6
  },
  {
    id: 37,
    nome: "Academia Saúde Total Ferraz",
    endereco: "R. Bahia, 1123 - Vila Santo Antônio",
    telefone: "(11) 4676-3344",
    horario: "06:00-22:00",
    latitude: -23.5388,
    longitude: -46.3670,
    bairro: "Ferraz de Vasconcelos",
    preco: 80.00,
    avaliacao: 4.0
  },
  {
    id: 38,
    nome: "Fit Club Ferraz",
    endereco: "R. Paraná, 300 - Jardim São Francisco",
    telefone: "(11) 4675-5566",
    horario: "05:00-22:00",
    latitude: -23.5435,
    longitude: -46.3732,
    bairro: "Ferraz de Vasconcelos",
    preco: 85.00,
    avaliacao: 4.1
  },
  {
    id: 39,
    nome: "Academia Ferraz Strong",
    endereco: "Av. Santa Catarina, 1500 - Jardim Santa Tereza",
    telefone: "(11) 4674-7788",
    horario: "06:00-23:00",
    latitude: -23.5450,
    longitude: -46.3750,
    bairro: "Ferraz de Vasconcelos",
    preco: 105.00,
    avaliacao: 4.4
  },
  {
    id: 40,
    nome: "New Gym Ferraz",
    endereco: "R. Goiás, 45 - Vila Santo Antônio",
    telefone: "(11) 4673-9900",
    horario: "07:00-21:00",
    latitude: -23.5372,
    longitude: -46.3658,
    bairro: "Ferraz de Vasconcelos",
    preco: 70.00,
    avaliacao: 3.7
  },
  // Continuação com mais academias em Ferraz...
  {
    id: 41,
    nome: "Academia Ferraz Forma",
    endereco: "R. Amazonas, 200 - Jardim Promissão",
    telefone: "(11) 4672-1122",
    horario: "06:00-22:00",
    latitude: -23.5445,
    longitude: -46.3720,
    bairro: "Ferraz de Vasconcelos",
    preco: 90.00,
    avaliacao: 4.2
  },
  {
    id: 42,
    nome: "Body Action Ferraz",
    endereco: "R. Mato Grosso, 500 - Centro",
    telefone: "(11) 4671-3344",
    horario: "05:30-22:30",
    latitude: -23.5415,
    longitude: -46.3710,
    bairro: "Ferraz de Vasconcelos",
    preco: 100.00,
    avaliacao: 4.3
  },
  {
    id: 43,
    nome: "Academia Ferraz Saúde",
    endereco: "Av. Pernambuco, 300 - Jardim Pérola",
    telefone: "(11) 4670-5566",
    horario: "06:00-22:00",
    latitude: -23.5435,
    longitude: -46.3695,
    bairro: "Ferraz de Vasconcelos",
    preco: 85.00,
    avaliacao: 4.0
  },
  {
    id: 44,
    nome: "Ferraz Fitness Club",
    endereco: "R. Ceará, 600 - Vila Romanópolis",
    telefone: "(11) 4669-7788",
    horario: "07:00-21:00",
    latitude: -23.5408,
    longitude: -46.3730,
    bairro: "Ferraz de Vasconcelos",
    preco: 75.00,
    avaliacao: 3.9
  },
  {
    id: 45,
    nome: "Academia Top Ferraz",
    endereco: "R. Alagoas, 400 - Jardim Brasil",
    telefone: "(11) 4668-9900",
    horario: "06:00-22:00",
    latitude: -23.5398,
    longitude: -46.3675,
    bairro: "Ferraz de Vasconcelos",
    preco: 95.00,
    avaliacao: 4.1
  },
  // Últimas academias...
  {
    id: 46,
    nome: "Academia Ferraz Ativa",
    endereco: "R. Sergipe, 150 - Jardim Santa Tereza",
    telefone: "(11) 4667-1122",
    horario: "06:00-23:00",
    latitude: -23.5455,
    longitude: -46.3740,
    bairro: "Ferraz de Vasconcelos",
    preco: 85.00,
    avaliacao: 4.0
  },
  {
    id: 47,
    nome: "Ferraz Extreme Gym",
    endereco: "R. Espírito Santo, 220 - Vila Santo Antônio",
    telefone: "(11) 4666-3344",
    horario: "05:30-22:30",
    latitude: -23.5385,
    longitude: -46.3660,
    bairro: "Ferraz de Vasconcelos",
    preco: 110.00,
    avaliacao: 4.5
  },
  {
    id: 48,
    nome: "Academia Ferraz Vital",
    endereco: "R. Paraíba, 350 - Jardim São Francisco",
    telefone: "(11) 4665-5566",
    horario: "06:00-22:00",
    latitude: -23.5448,
    longitude: -46.3728,
    bairro: "Ferraz de Vasconcelos",
    preco: 90.00,
    avaliacao: 4.2
  },
  {
    id: 49,
    nome: "Ferraz Power Center",
    endereco: "R. Rondônia, 180 - Jardim Promissão",
    telefone: "(11) 4664-7788",
    horario: "07:00-21:00",
    latitude: -23.5430,
    longitude: -46.3710,
    bairro: "Ferraz de Vasconcelos",
    preco: 75.00,
    avaliacao: 3.8
  },
  {
    id: 50,
    nome: "Academia Ferraz Total",
    endereco: "R. Acre, 290 - Centro",
    telefone: "(11) 4663-9900",
    horario: "06:00-22:00",
    latitude: -23.5410,
    longitude: -46.3700,
    bairro: "Ferraz de Vasconcelos",
    preco: 95.00,
    avaliacao: 4.1
  }
];

export default function App() {
  // Estados do primeiro código
  const [markers, setMarkers] = useState([]);
  const [search, setSearch] = useState('');
  const [region, setRegion] = useState({
    latitude: -23.55052,
    longitude: -46.633308,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  const [isAddingMarker, setIsAddingMarker] = useState(false);
  const [selectedMarker, setSelectedMarker] = useState(null);

  // Estados do segundo código
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [loading, setLoading] = useState(true);
  const [academiasProximas, setAcademiasProximas] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredAcademias, setFilteredAcademias] = useState([]);
  const [mapRegion, setMapRegion] = useState(null);
  const [activeTab, setActiveTab] = useState('academias'); // 'academias' ou 'mapa'

  // Efeitos combinados
  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permissão para acessar localização foi negada');
        setLoading(false);
        return;
      }

      try {
        let location = await Location.getCurrentPositionAsync({});
        setLocation(location.coords);
        setRegion({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          latitudeDelta: 0.01,
          longitudeDelta: 0.01,
        });
        setMapRegion({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          latitudeDelta: 0.0222,
          longitudeDelta: 0.0121,
        });
        setAcademiasProximas(mockAcademias);
        setFilteredAcademias(mockAcademias);
      } catch (error) {
        Alert.alert('Erro', 'Não foi possível obter a localização.');
        setErrorMsg('Erro ao obter localização');
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  useEffect(() => {
    if (searchTerm === '') {
      setFilteredAcademias(academiasProximas);
    } else {
      const filtered = academiasProximas.filter(academia => 
        academia.nome.toLowerCase().includes(searchTerm.toLowerCase()) ||
        academia.bairro.toLowerCase().includes(searchTerm.toLowerCase()) ||
        academia.endereco.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredAcademias(filtered);
    }
  }, [searchTerm, academiasProximas]);

  // Funções do primeiro código
  const handleMapPress = (e) => {
    if (isAddingMarker) {
      const coordinate = e.nativeEvent.coordinate;
      setMarkers([...markers, coordinate]);
      setIsAddingMarker(false);
    }
    setSelectedMarker(null);
  };

  const handleMarkerPress = (index) => {
    setSelectedMarker(index);
  };

  const handleSearch = async () => {
    Keyboard.dismiss();
    try {
      const results = await Location.geocodeAsync(search);
      if (results.length > 0) {
        const { latitude, longitude } = results[0];
        const newRegion = {
          latitude,
          longitude,
          latitudeDelta: 0.01,
          longitudeDelta: 0.01,
        };
        setRegion(newRegion);
        setMapRegion(newRegion);
      } else {
        Alert.alert('Local não encontrado', 'Tente digitar um endereço mais específico.');
      }
    } catch (error) {
      Alert.alert('Erro', 'Não foi possível buscar o endereço.');
    }
  };

  const toggleAddMarker = () => {
    setIsAddingMarker(!isAddingMarker);
    setSelectedMarker(null);
  };

  const deleteMarker = () => {
    if (selectedMarker !== null) {
      const newMarkers = markers.filter((_, index) => index !== selectedMarker);
      setMarkers(newMarkers);
      setSelectedMarker(null);
    }
  };

  // Funções do segundo código
  const focusOnAcademia = (academia) => {
    setMapRegion({
      latitude: academia.latitude,
      longitude: academia.longitude,
      latitudeDelta: 0.005,
      longitudeDelta: 0.005,
    });
    setSearchTerm(academia.nome);
  };

  const handleSearchSubmit = () => {
    if (filteredAcademias.length > 0) {
      focusOnAcademia(filteredAcademias[0]);
    }
  };

  const refreshLocation = async () => {
    setLoading(true);
    try {
      let location = await Location.getCurrentPositionAsync({});
      setLocation(location.coords);
      setRegion({
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      });
      setMapRegion({
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
        latitudeDelta: 0.0222,
        longitudeDelta: 0.0121,
      });
    } catch (error) {
      setErrorMsg('Erro ao atualizar localização');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#5A00A3" />
        <Text style={styles.loadingText}>Obtendo sua localização...</Text>
      </View>
    );
  }

  if (errorMsg) {
    return (
      <View style={styles.errorContainer}>
        <Icon name="error-outline" size={50} color="#ff4444" />
        <Text style={styles.errorText}>{errorMsg}</Text>
        <Pressable 
          style={styles.retryButton}
          onPress={() => window.location.reload()}
        >
          <Text style={styles.retryButtonText}>Tentar novamente</Text>
        </Pressable>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header e abas */}
      <View style={styles.header}>
        <Text style={styles.title}>Mapa e Academias</Text>
        
        <View style={styles.tabContainer}>
          <Pressable 
            style={[styles.tabButton, activeTab === 'academias' && styles.activeTab]}
            onPress={() => setActiveTab('academias')}
          >
            <Text style={styles.tabText}>Academias</Text>
          </Pressable>
          <Pressable 
            style={[styles.tabButton, activeTab === 'mapa' && styles.activeTab]}
            onPress={() => setActiveTab('mapa')}
          >
            <Text style={styles.tabText}>Meu Mapa</Text>
          </Pressable>
        </View>

        {activeTab === 'academias' ? (
          <View style={styles.searchContainer}>
            <Icon name="search" size={20} color="#666" style={styles.searchIcon} />
            <TextInput
              style={styles.searchInput}
              placeholder="Buscar academias..."
              value={searchTerm}
              onChangeText={setSearchTerm}
              onSubmitEditing={handleSearchSubmit}
              returnKeyType="search"
            />
            {searchTerm !== '' && (
              <Pressable onPress={() => setSearchTerm('')} style={styles.clearButton}>
                <Icon name="close" size={20} color="#666" />
              </Pressable>
            )}
          </View>
        ) : (
          <TextInput
            style={styles.input}
            placeholder="Digite o local desejado..."
            value={search}
            onChangeText={setSearch}
            onSubmitEditing={handleSearch}
          />
        )}
      </View>

      {/* Mapa */}
      <MapView
        style={styles.map}
        onPress={handleMapPress}
        region={activeTab === 'academias' ? mapRegion : region}
        showsUserLocation={true}
      >
        {/* Marcadores de academias */}
        {activeTab === 'academias' && filteredAcademias.map((academia) => (
          <Marker
            key={academia.id}
            coordinate={{
              latitude: academia.latitude,
              longitude: academia.longitude,
            }}
            title={academia.nome}
            onPress={() => focusOnAcademia(academia)}
          >
            <View style={styles.markerAcademia}>
              <Icon name="fitness-center" size={24} color="#fff" />
            </View>
          </Marker>
        ))}

        {/* Marcadores personalizados */}
        {activeTab === 'mapa' && markers.map((marker, index) => (
          <Marker
            key={index}
            coordinate={marker}
            onPress={() => handleMarkerPress(index)}
          >
            <View style={styles.markerContainer}>
              <Ionicons 
                name="location" 
                size={40} 
                color={selectedMarker === index ? '#FF3B30' : '#007AFF'} 
              />
            </View>
          </Marker>
        ))}
      </MapView>

      {/* Lista de academias ou controles do mapa */}
      {activeTab === 'academias' ? (
        <ScrollView style={styles.listContainer}>
          <View style={styles.resultsInfo}>
            <Text style={styles.resultsText}>
              {filteredAcademias.length} {filteredAcademias.length === 1 ? 'academia encontrada' : 'academias encontradas'}
            </Text>
          </View>
          
          {filteredAcademias.map(academia => (
            <Pressable 
              key={academia.id} 
              onPress={() => focusOnAcademia(academia)}
            >
              <View style={styles.academiaItem}>
                <Text style={styles.academiaNome}>{academia.nome}</Text>
                <Text style={styles.academiaInfo}>{academia.bairro} • {academia.endereco}</Text>
                <Text style={styles.academiaPreco}>R$ {academia.preco.toFixed(2)}/mês</Text>
              </View>
            </Pressable>
          ))}
        </ScrollView>
      ) : (
        <View style={styles.mapControls}>
          <TouchableOpacity 
            style={[styles.actionButton, styles.addButton, isAddingMarker && styles.addButtonActive]}
            onPress={toggleAddMarker}
          >
            <Ionicons 
              name={isAddingMarker ? "close" : "add"} 
              size={24} 
              color="white" 
            />
          </TouchableOpacity>
          
          {selectedMarker !== null && (
            <TouchableOpacity 
              style={[styles.actionButton, styles.deleteButton]}
              onPress={deleteMarker}
            >
              <Ionicons name="trash" size={24} color="white" />
            </TouchableOpacity>
          )}
        </View>
      )}

      {/* Botão de atualizar localização */}
      <TouchableOpacity 
        style={styles.refreshButton}
        onPress={refreshLocation}
      >
        <Ionicons name="refresh" size={24} color="white" />
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    padding: 20,
    paddingTop: 50,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  tabContainer: {
    flexDirection: 'row',
    marginBottom: 15,
    backgroundColor: '#f5f5f5',
    borderRadius: 8,
    overflow: 'hidden',
  },
  tabButton: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
  },
  activeTab: {
    backgroundColor: '#5A00A3',
  },
  tabText: {
    fontWeight: 'bold',
    color: '#333',
  },
  activeTabText: {
    color: '#fff',
  },
  input: {
    width: '100%',
    height: 40,
    backgroundColor: 'white',
    borderRadius: 8,
    paddingHorizontal: 10,
    elevation: 2,
    marginTop: 10,
  },
  map: {
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height - 200,
  },
  markerContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    width: 40,
    height: 40,
  },
  markerAcademia: {
    backgroundColor: '#5A00A3',
    padding: 8,
    borderRadius: 20,
  },
  actionButton: {
    position: 'absolute',
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
  },
  addButton: {
    bottom: 30,
    right: 20,
    backgroundColor: '#007AFF',
  },
  addButtonActive: {
    backgroundColor: '#FF3B30',
  },
  deleteButton: {
    bottom: 90,
    right: 20,
    backgroundColor: '#FF3B30',
  },
  refreshButton: {
    position: 'absolute',
    bottom: 30,
    right: 20,
    backgroundColor: '#5A00A3',
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 3,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 15,
    color: '#666',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    marginTop: 15,
    color: '#ff4444',
    fontSize: 16,
    textAlign: 'center',
  },
  retryButton: {
    marginTop: 20,
    backgroundColor: '#5A00A3',
    padding: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    borderRadius: 8,
    paddingHorizontal: 10,
    marginTop: 10,
    height: 40,
  },
  searchIcon: {
    marginRight: 8,
  },
  searchInput: {
    flex: 1,
    height: '100%',
  },
  clearButton: {
    padding: 5,
  },
  resultsInfo: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    backgroundColor: '#fff',
  },
  resultsText: {
    color: '#666',
    fontSize: 14,
  },
  listContainer: {
    maxHeight: 200,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#eee',
  },
  academiaItem: {
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  academiaNome: {
    fontWeight: 'bold',
    fontSize: 16,
  },
  academiaInfo: {
    color: '#666',
    fontSize: 14,
    marginTop: 3,
  },
  academiaPreco: {
    color: '#5A00A3',
    fontWeight: 'bold',
    marginTop: 5,
  },
  mapControls: {
    position: 'absolute',
    bottom: 100,
    right: 20,
  },
});